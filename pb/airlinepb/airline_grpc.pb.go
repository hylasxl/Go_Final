// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: api/proto/airline.proto

package airlinepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AirlineService_CreateArline_FullMethodName      = "/auth.AirlineService/CreateArline"
	AirlineService_GetListAirline_FullMethodName    = "/auth.AirlineService/GetListAirline"
	AirlineService_GetAirline_FullMethodName        = "/auth.AirlineService/GetAirline"
	AirlineService_UpdateAirline_FullMethodName     = "/auth.AirlineService/UpdateAirline"
	AirlineService_DeleteAirline_FullMethodName     = "/auth.AirlineService/DeleteAirline"
	AirlineService_AirlineGetFlights_FullMethodName = "/auth.AirlineService/AirlineGetFlights"
)

// AirlineServiceClient is the client API for AirlineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirlineServiceClient interface {
	CreateArline(ctx context.Context, in *CreateArlineRequest, opts ...grpc.CallOption) (*AirlineResponse, error)
	GetListAirline(ctx context.Context, in *GetListAirlineRequest, opts ...grpc.CallOption) (*GetListAirlineResponse, error)
	GetAirline(ctx context.Context, in *GetAirlineRequest, opts ...grpc.CallOption) (*GetAirlineResponse, error)
	UpdateAirline(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*AirlineResponse, error)
	DeleteAirline(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*AirlineResponse, error)
	AirlineGetFlights(ctx context.Context, in *AirlineGetFlightRequest, opts ...grpc.CallOption) (*AirlineGetFlightResponse, error)
}

type airlineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirlineServiceClient(cc grpc.ClientConnInterface) AirlineServiceClient {
	return &airlineServiceClient{cc}
}

func (c *airlineServiceClient) CreateArline(ctx context.Context, in *CreateArlineRequest, opts ...grpc.CallOption) (*AirlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirlineResponse)
	err := c.cc.Invoke(ctx, AirlineService_CreateArline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlineServiceClient) GetListAirline(ctx context.Context, in *GetListAirlineRequest, opts ...grpc.CallOption) (*GetListAirlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListAirlineResponse)
	err := c.cc.Invoke(ctx, AirlineService_GetListAirline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlineServiceClient) GetAirline(ctx context.Context, in *GetAirlineRequest, opts ...grpc.CallOption) (*GetAirlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAirlineResponse)
	err := c.cc.Invoke(ctx, AirlineService_GetAirline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlineServiceClient) UpdateAirline(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*AirlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirlineResponse)
	err := c.cc.Invoke(ctx, AirlineService_UpdateAirline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlineServiceClient) DeleteAirline(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*AirlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirlineResponse)
	err := c.cc.Invoke(ctx, AirlineService_DeleteAirline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlineServiceClient) AirlineGetFlights(ctx context.Context, in *AirlineGetFlightRequest, opts ...grpc.CallOption) (*AirlineGetFlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirlineGetFlightResponse)
	err := c.cc.Invoke(ctx, AirlineService_AirlineGetFlights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirlineServiceServer is the server API for AirlineService service.
// All implementations must embed UnimplementedAirlineServiceServer
// for forward compatibility.
type AirlineServiceServer interface {
	CreateArline(context.Context, *CreateArlineRequest) (*AirlineResponse, error)
	GetListAirline(context.Context, *GetListAirlineRequest) (*GetListAirlineResponse, error)
	GetAirline(context.Context, *GetAirlineRequest) (*GetAirlineResponse, error)
	UpdateAirline(context.Context, *UpdateAirlineRequest) (*AirlineResponse, error)
	DeleteAirline(context.Context, *DeleteAirlineRequest) (*AirlineResponse, error)
	AirlineGetFlights(context.Context, *AirlineGetFlightRequest) (*AirlineGetFlightResponse, error)
	mustEmbedUnimplementedAirlineServiceServer()
}

// UnimplementedAirlineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAirlineServiceServer struct{}

func (UnimplementedAirlineServiceServer) CreateArline(context.Context, *CreateArlineRequest) (*AirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArline not implemented")
}
func (UnimplementedAirlineServiceServer) GetListAirline(context.Context, *GetListAirlineRequest) (*GetListAirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAirline not implemented")
}
func (UnimplementedAirlineServiceServer) GetAirline(context.Context, *GetAirlineRequest) (*GetAirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirline not implemented")
}
func (UnimplementedAirlineServiceServer) UpdateAirline(context.Context, *UpdateAirlineRequest) (*AirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirline not implemented")
}
func (UnimplementedAirlineServiceServer) DeleteAirline(context.Context, *DeleteAirlineRequest) (*AirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirline not implemented")
}
func (UnimplementedAirlineServiceServer) AirlineGetFlights(context.Context, *AirlineGetFlightRequest) (*AirlineGetFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirlineGetFlights not implemented")
}
func (UnimplementedAirlineServiceServer) mustEmbedUnimplementedAirlineServiceServer() {}
func (UnimplementedAirlineServiceServer) testEmbeddedByValue()                        {}

// UnsafeAirlineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirlineServiceServer will
// result in compilation errors.
type UnsafeAirlineServiceServer interface {
	mustEmbedUnimplementedAirlineServiceServer()
}

func RegisterAirlineServiceServer(s grpc.ServiceRegistrar, srv AirlineServiceServer) {
	// If the following call pancis, it indicates UnimplementedAirlineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AirlineService_ServiceDesc, srv)
}

func _AirlineService_CreateArline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineServiceServer).CreateArline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirlineService_CreateArline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineServiceServer).CreateArline(ctx, req.(*CreateArlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlineService_GetListAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineServiceServer).GetListAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirlineService_GetListAirline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineServiceServer).GetListAirline(ctx, req.(*GetListAirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlineService_GetAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineServiceServer).GetAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirlineService_GetAirline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineServiceServer).GetAirline(ctx, req.(*GetAirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlineService_UpdateAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineServiceServer).UpdateAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirlineService_UpdateAirline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineServiceServer).UpdateAirline(ctx, req.(*UpdateAirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlineService_DeleteAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineServiceServer).DeleteAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirlineService_DeleteAirline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineServiceServer).DeleteAirline(ctx, req.(*DeleteAirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlineService_AirlineGetFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineGetFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlineServiceServer).AirlineGetFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirlineService_AirlineGetFlights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlineServiceServer).AirlineGetFlights(ctx, req.(*AirlineGetFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AirlineService_ServiceDesc is the grpc.ServiceDesc for AirlineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirlineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AirlineService",
	HandlerType: (*AirlineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArline",
			Handler:    _AirlineService_CreateArline_Handler,
		},
		{
			MethodName: "GetListAirline",
			Handler:    _AirlineService_GetListAirline_Handler,
		},
		{
			MethodName: "GetAirline",
			Handler:    _AirlineService_GetAirline_Handler,
		},
		{
			MethodName: "UpdateAirline",
			Handler:    _AirlineService_UpdateAirline_Handler,
		},
		{
			MethodName: "DeleteAirline",
			Handler:    _AirlineService_DeleteAirline_Handler,
		},
		{
			MethodName: "AirlineGetFlights",
			Handler:    _AirlineService_AirlineGetFlights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/airline.proto",
}

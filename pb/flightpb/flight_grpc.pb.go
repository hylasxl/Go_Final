// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: api/proto/flight.proto

package flightpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlightService_CreateFlight_FullMethodName     = "/auth.FlightService/CreateFlight"
	FlightService_RescheduleFlight_FullMethodName = "/auth.FlightService/RescheduleFlight"
	FlightService_GetFlightSeats_FullMethodName   = "/auth.FlightService/GetFlightSeats"
	FlightService_GetFlights_FullMethodName       = "/auth.FlightService/GetFlights"
)

// FlightServiceClient is the client API for FlightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightServiceClient interface {
	CreateFlight(ctx context.Context, in *CreateFlightRequest, opts ...grpc.CallOption) (*CreateFlightResponse, error)
	RescheduleFlight(ctx context.Context, in *RescheduleFlightRequest, opts ...grpc.CallOption) (*RescheduleFlightResponse, error)
	GetFlightSeats(ctx context.Context, in *GetFlightSeatRequest, opts ...grpc.CallOption) (*GetFlightSeatResponse, error)
	GetFlights(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error)
}

type flightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightServiceClient(cc grpc.ClientConnInterface) FlightServiceClient {
	return &flightServiceClient{cc}
}

func (c *flightServiceClient) CreateFlight(ctx context.Context, in *CreateFlightRequest, opts ...grpc.CallOption) (*CreateFlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlightResponse)
	err := c.cc.Invoke(ctx, FlightService_CreateFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) RescheduleFlight(ctx context.Context, in *RescheduleFlightRequest, opts ...grpc.CallOption) (*RescheduleFlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RescheduleFlightResponse)
	err := c.cc.Invoke(ctx, FlightService_RescheduleFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) GetFlightSeats(ctx context.Context, in *GetFlightSeatRequest, opts ...grpc.CallOption) (*GetFlightSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlightSeatResponse)
	err := c.cc.Invoke(ctx, FlightService_GetFlightSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightServiceClient) GetFlights(ctx context.Context, in *GetFlightRequest, opts ...grpc.CallOption) (*GetFlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlightResponse)
	err := c.cc.Invoke(ctx, FlightService_GetFlights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightServiceServer is the server API for FlightService service.
// All implementations must embed UnimplementedFlightServiceServer
// for forward compatibility.
type FlightServiceServer interface {
	CreateFlight(context.Context, *CreateFlightRequest) (*CreateFlightResponse, error)
	RescheduleFlight(context.Context, *RescheduleFlightRequest) (*RescheduleFlightResponse, error)
	GetFlightSeats(context.Context, *GetFlightSeatRequest) (*GetFlightSeatResponse, error)
	GetFlights(context.Context, *GetFlightRequest) (*GetFlightResponse, error)
	mustEmbedUnimplementedFlightServiceServer()
}

// UnimplementedFlightServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlightServiceServer struct{}

func (UnimplementedFlightServiceServer) CreateFlight(context.Context, *CreateFlightRequest) (*CreateFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (UnimplementedFlightServiceServer) RescheduleFlight(context.Context, *RescheduleFlightRequest) (*RescheduleFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleFlight not implemented")
}
func (UnimplementedFlightServiceServer) GetFlightSeats(context.Context, *GetFlightSeatRequest) (*GetFlightSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightSeats not implemented")
}
func (UnimplementedFlightServiceServer) GetFlights(context.Context, *GetFlightRequest) (*GetFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlights not implemented")
}
func (UnimplementedFlightServiceServer) mustEmbedUnimplementedFlightServiceServer() {}
func (UnimplementedFlightServiceServer) testEmbeddedByValue()                       {}

// UnsafeFlightServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightServiceServer will
// result in compilation errors.
type UnsafeFlightServiceServer interface {
	mustEmbedUnimplementedFlightServiceServer()
}

func RegisterFlightServiceServer(s grpc.ServiceRegistrar, srv FlightServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlightServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlightService_ServiceDesc, srv)
}

func _FlightService_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightService_CreateFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).CreateFlight(ctx, req.(*CreateFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_RescheduleFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RescheduleFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).RescheduleFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightService_RescheduleFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).RescheduleFlight(ctx, req.(*RescheduleFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_GetFlightSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).GetFlightSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightService_GetFlightSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).GetFlightSeats(ctx, req.(*GetFlightSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightService_GetFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServiceServer).GetFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightService_GetFlights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServiceServer).GetFlights(ctx, req.(*GetFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightService_ServiceDesc is the grpc.ServiceDesc for FlightService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.FlightService",
	HandlerType: (*FlightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlight",
			Handler:    _FlightService_CreateFlight_Handler,
		},
		{
			MethodName: "RescheduleFlight",
			Handler:    _FlightService_RescheduleFlight_Handler,
		},
		{
			MethodName: "GetFlightSeats",
			Handler:    _FlightService_GetFlightSeats_Handler,
		},
		{
			MethodName: "GetFlights",
			Handler:    _FlightService_GetFlights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/flight.proto",
}
